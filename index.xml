<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo tranquilpeak theme</title>
    <link>/</link>
    <description>Recent content on Hugo tranquilpeak theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 06 Sep 2017 11:37:42 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TCP/IP详解卷 读书笔记</title>
      <link>/2017/09/tcp/ip%E8%AF%A6%E8%A7%A3%E5%8D%B7-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 06 Sep 2017 11:37:42 +0800</pubDate>
      
      <guid>/2017/09/tcp/ip%E8%AF%A6%E8%A7%A3%E5%8D%B7-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>TCP/IP详解卷 读书笔记 为什么要看 这是互联网的基础，web开发者基础
概述 1.2 分层  在 T C P / I P 协议族中,网络层 I P 提 供 的 是 一 种 不 可 靠 的 服 务 。 也 就 是 说 , 它 只 是 尽 可 能 快 地把分组从源结点送到目的结点,但是并不提供任何可靠性保证。而另一方面, T C P 在不可 靠的 I P 层 上 提 供 了 一 个 可 靠 的 运 输 层 。 为 了 提 供 这 种 可 靠 的 服 务 , T C P 采 用 了 超 时 重 传 、 发 送和接收端到端的确认分组等机制。由此可见,运输层和网络层分别负责不同的功能。  3.</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>/2017/07/ansible/</link>
      <pubDate>Mon, 31 Jul 2017 13:42:46 +0800</pubDate>
      
      <guid>/2017/07/ansible/</guid>
      <description>主机环境 centOS7.2 python2.7
Installation  centOS环境需要先配置EPEL: yum install epel-release 然后再安装ansible: sudo yum install ansible 参考资料Ansible中文权威指南  New Driver to load  新手上路TODO  参考文档 开源自动化配置管理工具ansible、saltstack、Puppet、Chef选择</description>
    </item>
    
    <item>
      <title>jenkins 搭建初级</title>
      <link>/2017/07/jenkins-%E6%90%AD%E5%BB%BA%E5%88%9D%E7%BA%A7/</link>
      <pubDate>Tue, 25 Jul 2017 11:09:51 +0800</pubDate>
      
      <guid>/2017/07/jenkins-%E6%90%AD%E5%BB%BA%E5%88%9D%E7%BA%A7/</guid>
      <description> 下载  官网下载jenkins.war包 下载java jre 配置环境变量  启动  运行java jenkins.war &amp;ndash;httpPort=yourport  配置 问题  执行shell时会遇到权限问题
 妥协了切换成root用户执行jenkins了 用普通用户是可以的，只是需要更多的时间，失了耐心  插件列表中的插件太新，不能兼容老旧的gitlab
 上传插件遇到Nginx 上传文件过大的问题
 通过在 jenkins插件下载 中下载插件到服务器的jenkins/plugins目录下重启jenkins,插件安装成功   </description>
    </item>
    
    <item>
      <title>It&#39;s time to sleep</title>
      <link>/2017/07/its-time-to-sleep/</link>
      <pubDate>Sun, 23 Jul 2017 23:16:57 +0800</pubDate>
      
      <guid>/2017/07/its-time-to-sleep/</guid>
      <description>明天一定是一个起舞的日子</description>
    </item>
    
    <item>
      <title></title>
      <link>/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/</guid>
      <description>第一本Docker书 第一章 简介 1.1.1 提供一个简单轻量的建模方式  docker及其简洁，全部环境一台安装了肩同版本的Linux内核和二进制文件最小限的宿主机
 大多数docker容器只需要不到1秒钟即可启动
 由于去除了管理程序的开销，docker容器拥有很高大的性能，充分的利用资源
  1.1.2 职责的逻辑分离  使用docker  开发人员只需要关心容器中运行的程序 运维人员只需要关心如何管理容器  docker设计目的就是要加强开发人员写代码的开发环境与应用程序要部署环境的一致性  1.1.3 快速高效的开发生命周期 1.1.3 鼓励使用面向服务的架构  docker鼓励面向服务的架构和微服务架构 推荐一个容器只运行一个应用程序或进程，形成一个分布式的应用模型，分布式的部署应用，扩展或调试应用变得简单，提高程序的内省性（什么意思？）  1.2docker组件  客户端和服务器：c/s架构，命令行工具docker与一整套RESTful API 镜像：镜像是基于联合（Union）文件系统的一种层级结构 Registry： 类似于github 容器：  容器是基于镜像启动起来的，容器中可以运行一个或多个进程 可以认为，竟像是docker生命周期中的侯建或打包阶段，容器是启动或执行阶段。 总结，docker容器： 一个镜像格式 一系列标准操作 一个执行环境   1.3 我们能用docker做什么  加快本地开发和构建流程，高效，轻量化 独立的服务或应用在不同的环境中，得到相同的结果 创建隔离环境来进行测试，如Jenkins CI 启动一个测试容器 构建一个多用户的平台即服务（PaaS）基础设施（什么意思？） 提供软件即服务（SaaS）应用程序 高性能，超大规模的宿主机部署  1.4docker与配置管理 1.5 docker的技术组件  Linux内核的x64主机上 内核版本 &amp;gt;=3.8 Linux内核的命名空间（namespace）：  文件系统隔离： 每个容器都有自己的root文件系统 进程隔离： 每个容器都隐形在自己的进程环境中 网络隔离： 容器间的虚拟网络接口和IP地址都是分开的 资源隔离和分组： 使用cgroups（即control group，Linux 的内核特性之一）将CPU和内存之类的资源独立分配给每个Docker容器 写时复制： 文件系统都是通过写时复制常见的，意味着文件系统时分层的，快速的，占用磁盘空间更小（什么意思？） 日志： 容器的stdout，stderr，stdin这些IO流都会被收集并计入日志，用来进行日志分析和故障排错。 交互式shell： 可以创建一个伪tty终端， 将其连接到STDIN，为容器提供一个交互式shell。   第二章 安装docker 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>/1/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/</guid>
      <description> 我的消息列表    METHOD URI     GET /messages    参数    NAME POSITION TYPE RESTRAINT DESC     X-Auth-Token Header String 必填 用户Token    响应 { &amp;quot;data&amp;quot;: [ { &amp;quot;shareMessage&amp;quot;: { &amp;quot;title&amp;quot;: &amp;quot;分享消息分享标题&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;分享消息分享内容&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;https://www.baidu.com&amp;quot;, &amp;quot;avatar&amp;quot;: &amp;quot;http://img2.tuicool.com/vIVVBnu.png!web&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;@RB9bg&amp;quot;, &amp;quot;createdAt&amp;quot;: &amp;quot;2017-09-05 15:03:54&amp;quot;, &amp;quot;_type&amp;quot;: &amp;quot;ShareMessage&amp;quot; }, &amp;quot;type&amp;quot;: &amp;quot;system&amp;quot;, &amp;quot;title&amp;quot;: &amp;quot;标题&amp;quot;, &amp;quot;content&amp;quot;: &amp;quot;内容&amp;quot;, &amp;quot;url&amp;quot;: &amp;quot;http://img2.tuicool.com/vIVVBnu.png!web&amp;quot;, &amp;quot;read&amp;quot;: false, &amp;quot;createPush&amp;quot;: true, &amp;quot;pushTitle&amp;quot;: &amp;quot;标题&amp;quot;, &amp;quot;pushContent&amp;quot;: &amp;quot;内容&amp;quot;, &amp;quot;id&amp;quot;: &amp;quot;@WBqpX&amp;quot;, &amp;quot;createdAt&amp;quot;: &amp;quot;2017-09-05 15:03:54&amp;quot;, &amp;quot;_type&amp;quot;: &amp;quot;Message&amp;quot;, &amp;quot;userId&amp;quot;: &amp;quot;18894&amp;quot;, &amp;quot;shareMessageId&amp;quot;: &amp;quot;@RB9bg&amp;quot; } ] }  </description>
    </item>
    
  </channel>
</rss>